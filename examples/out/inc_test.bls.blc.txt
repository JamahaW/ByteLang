-------------------------------------------------- <<< primitives >>> --------------------------------------------------
  0: [unsigned 8-bit] std::u8@0
  1: [signed 8-bit] std::i8@1
  2: [unsigned 16-bit] std::u16@2
  3: [signed 16-bit] std::i16@3
  4: [unsigned 32-bit] std::u32@4
  5: [signed 32-bit] std::i32@5
  6: [unsigned 64-bit] std::u64@6
  7: [signed 64-bit] std::i64@7
  8: [exponent 32-bit] std::f32@8
  9: [exponent 64-bit] std::f64@9

------------------------------------------- <<< instructions : test_env >>> --------------------------------------------
  0: [2B] base::exit@0(std::u8)
  1: [2B] base::delay@1(std::u8*)
  2: [1B] math::add@2()
  3: [1B] math::mul@3()
  4: [1B] math::sub@4()
  5: [1B] math::div@5()
  6: [2B] math::inc@6(std::u8*)
  7: [2B] math::dec@7(std::u8*)
  8: [2B] io::print@8(std::u8*)
  9: [2B] io::input@9(std::u8*)
 10: [2B] io::write@10(std::u8*)
 11: [2B] io::write_BYTE@11(std::u8)
 12: [3B] io::write_WORD@12(std::u16)
 13: [5B] io::write_DWORD@13(std::u32)
 14: [9B] io::write_QWORD@14(std::u64)

------------------------------------------------ <<< profile : avr >>> -------------------------------------------------
parent                  : 'A:\\Projects\\ByteLang\\data\\profiles\\avr.json'
name                    : 'avr'
max_program_length      : 512
pointer_program         : [unsigned 16-bit] std::u16@2
pointer_heap            : [unsigned 8-bit] std::u8@0
instruction_index       : [unsigned 8-bit] std::u8@0
type_index              : [unsigned 8-bit] std::u8@0
--------------------------- <<< statements : A:\Projects\ByteLang\examples\inc_test.bls >>> ----------------------------
  0: .env test_env                    DIRECTIVE_USE@1                  env(<test_env>)
  1: .ptr i16 var 0                   DIRECTIVE_USE@2                  ptr(<i16>, <var>, { 0 | 0.0 })
  2: inc var                          INSTRUCTION_CALL@3               inc(<var>)
  3: print var                        INSTRUCTION_CALL@4               print(<var>)
  4: exit 0                           INSTRUCTION_CALL@5               exit({ 0 | 0.0 })

-------------------------------------------------- <<< constants >>> ---------------------------------------------------
var     : { 1 | 1.0 }
-------------------------------------------------- <<< variables >>> ---------------------------------------------------
  0: std::i16 var@1 = 0000

------------------------ <<< code instructions : A:\Projects\ByteLang\examples\inc_test.bls >>> ------------------------
  0: [2B] math::inc@6 { (std::u8*)01 }
  1: [2B] io::print@8 { (std::u8*)01 }
  2: [2B] base::exit@0 { (std::u8)00 }

------------------------ <<< bytecode : A:\Projects\ByteLang\examples\out\inc_test.bls.blc >>> -------------------------

#  program start address define
0000: 04

#  std::i16 var@1 = 0000
0001: 03
0002: 00
0003: 00

#  [2B] math::inc@6 { (std::u8*)01 }
0004: 06
0005: 01

#  [2B] io::print@8 { (std::u8*)01 }
0006: 08
0007: 01

#  [2B] base::exit@0 { (std::u8)00 }
0008: 00
0009: 00
